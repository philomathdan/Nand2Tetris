// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //This sets the bit validaddr, which is 1 iff we don't have the following:
    //address[14]==1 AND address[13]==1 AND (address[12]=1 OR ... OR address[0]=1)
    Or8Way(in = address[0..7], out = addr0to7);
    Or8Way(in[0..4] = address[8..12], in[5..7] = false, out = addr8to12);
    Or(a = addr0to7, b = addr8to12, out = addr0to12);
    And(a = address[13], b = address[14], out = addr13to14);
    And(a = addr0to12, b = addr13to14, out = addr0to14);
    Not(in = addr0to14, out = validaddr);
    
    //This part is the same as Memory.hdl, except that load has been replaced with
    //verifiedload = And(load,validaddr)   
    Not(in = address[13], out = notaddr13);
    And(a = notaddr13, b = address[14], out = sel1);
    And(a = load, b = validaddr, out = verifiedload);
    DMux(in=verifiedload, sel = sel1, a = loadram, b = loadscreen);
    
    RAM16K(in = in, address = address[0..13], load = loadram, out = outram);
    
    Screen(in = in, address = address[0..12], load = loadscreen, out = outscreen);
    
    Keyboard(out = outkbd);
    
    //This part is the same as Memory.hdl, except that out has been changed to memoryout
    //which goes through a Mux16 gate if validaddr==1.  Otherwise the value 0 is sent to out.
    And(a = address[13], b = address[14], out = sel2);
    Mux16(a = outram, b = outscreen, sel = sel1, out = outramorscreen);
    Mux16(a = outramorscreen, b = outkbd, sel = sel2, out = memoryout);
    Mux16(a = false, b = memoryout, sel = validaddr, out = out);
}
